version: '3'

vars:
  FRONTEND_DIR: frontend
  BACKEND_DIR: backend
  PROD_HOST: vpsjim
  PROD_DB_PATH: ~/pingmaster/data/sql_app.db
  CONTAINER_NAME: pingmaster_api_1

tasks:
  install:
    desc: Installe toutes les dépendances du projet
    cmds:
      - task: install:frontend
      - task: install:backend

  install:frontend:
    desc: Installe les dépendances du frontend
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - npm install

  install:backend:
    desc: Installe les dépendances du backend
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - pip install -r requirements.txt

  dev:
    desc: Lance les serveurs de développement
    cmds:
      - task: dev:frontend
      - task: dev:backend

  dev:frontend:
    desc: Lance le serveur de développement frontend
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - npm run dev

  dev:backend:
    desc: Lance le serveur de développement backend
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - ../venv/bin/uvicorn app.main:app --reload --port 8000 --env-file .env.local

  build:
    desc: Build le projet
    cmds:
      - task: build:frontend
      - task: build:backend

  build:frontend:
    desc: Build le frontend
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - npm run build

  build:backend:
    desc: Build le backend
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - docker build -t monitoring-dashboard-api .

  test:
    desc: Lance tous les tests
    cmds:
      - task: test:backend

  test:backend:
    desc: Lance les tests backend
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - ../venv/bin/pytest

  test:backend:verbose:
    desc: Lance les tests backend en mode verbeux et s'arrête à la première erreur
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - |
        ../venv/bin/pytest \
        -v \
        -s \
        --no-header \
        --tb=short \
        --maxfail=1 \
        --log-cli-level=INFO \
        --capture=no \
        {{.CLI_ARGS}}

  preview:
    desc: Preview la build du frontend
    dir: '{{.FRONTEND_DIR}}'
    cmds:
      - npm run preview

  clean:
    desc: Nettoie les fichiers générés
    cmds:
      - rm -rf {{.FRONTEND_DIR}}/dist
      - rm -rf {{.FRONTEND_DIR}}/node_modules
      - rm -rf venv
      - rm -rf {{.BACKEND_DIR}}/__pycache__
      - rm -rf {{.BACKEND_DIR}}/.pytest_cache
      - rm -f {{.BACKEND_DIR}}/sql_app.db

  docker:up:
    desc: Lance les conteneurs Docker
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - docker-compose up

  docker:down:
    desc: Arrête les conteneurs Docker
    dir: '{{.BACKEND_DIR}}'
    cmds:
      - docker-compose down

  db:download:
    desc: Download the production database
    cmds:
      - mkdir -p {{.BACKEND_DIR}}/data
      - scp {{.PROD_HOST}}:{{.PROD_DB_PATH}} {{.BACKEND_DIR}}/data/prod_db.db
      - echo "Production database downloaded to {{.BACKEND_DIR}}/data/prod_db.db"

  db:view:
    desc: Open the downloaded production database in VS Code
    cmds:
      - cursor {{.BACKEND_DIR}}/data/prod_db.db

  db:manage:
    desc: Download and view the production database
    cmds:
      - task: db:download
      - task: db:view

  debug:prod:db:
    desc: Debug production database issues
    cmds:
      - ssh {{.PROD_HOST}} "docker logs {{.CONTAINER_NAME}}"
      - ssh {{.PROD_HOST}} "ls -la ~/pingmaster/data"
      - ssh {{.PROD_HOST}} "docker exec {{.CONTAINER_NAME}} ls -la /app/data"

  logs:prod:
    desc: View last 50 production logs
    cmds:
      - ssh {{.PROD_HOST}} "docker logs --tail 50 {{.CONTAINER_NAME}}"

  logs:prod:follow:
    desc: Follow production logs in real-time
    cmds:
      - ssh {{.PROD_HOST}} "docker logs --tail 10 -f {{.CONTAINER_NAME}}"

  logs:prod:recent:
    desc: View logs from last 5 minutes
    cmds:
      - ssh {{.PROD_HOST}} "docker logs --since 5m {{.CONTAINER_NAME}}"

  logs:prod:all:
    desc: View all production logs (use with caution)
    cmds:
      - ssh {{.PROD_HOST}} "docker logs {{.CONTAINER_NAME}}"

  exec:prod:
    desc: Execute command in production container
    cmds:
      - ssh {{.PROD_HOST}} "docker exec -it {{.CONTAINER_NAME}} bash"

  generate:types:
    desc: Génère les types TypeScript depuis l'API
    cmds:
      # Récupère le schéma OpenAPI
      - curl http://127.0.0.1:8000/openapi.json > frontend/src/types/openapi.json
      # Convertit le schéma en types TS
      - npx openapi-typescript frontend/src/types/openapi.json --output frontend/src/types/api.ts
    deps:
      - install:frontend